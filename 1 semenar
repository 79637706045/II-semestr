#include <stdio.h>
#include<stdlib.h>

// Struct to store tree element
typedef struct tree_element {
	int value;			// Element value
	struct tree_element* left;	// Pointer to left subtree
	struct tree_element* right;	// Pointer to right subtree
} tree_element;

/**********************************************
** yslovie vstavki: val_l < val <= val_right **
**********************************************/

// Create new element, set its value to 'i', return pointer to new element
tree_element* create_tree_element(int i);

// Insert element 'elem' into tree 'root'
tree_element* insert_into_tree(tree_element* root, tree_element* elem);

// Print tree
void print_tree(tree_element* head);

// Search for given value in the tree
// Returns pointer to found element and NULL otherwise
tree_element* search_by_value(tree_element* root, int value);

// Deletes element from the tree
// tree_element* delete_from_tree(tree_element* root, tree_element* elem);

int main()
{
	int a[7] = {-3, -1, -5, 3, 1, 5, 6};
	int i;
	tree_element* cur_elem;
	tree_element* root;
	
	root = create_tree_element(a[0]);
	
	for(i = 1; i < 7; i++)
	{
		tree_element* elem = create_tree_element(a[i]);
		printf("hi\n");
	/*---------------------------------------*/
	/*  !!! problemya s etoy funksiey !!!    */
		root = insert_into_tree(root, elem); 
	/*---------------------------------------*/	
		printf("Hello\n");
	}

	printf("Tree after creation:\n");
	print_tree(root);

	cur_elem = search_by_value(root, 3);
	if(cur_elem != NULL)
	{
		printf("Search for value 3: found\n");
	}

	cur_elem = search_by_value(root, 111);
	if(cur_elem == NULL)
	{
		printf("Search for value 111: not found\n");
	}

	return 0;
}

tree_element* search_by_value(tree_element* current, int value){
	tree_element* adress = NULL;
	
/*  tak kak funkcia doljna vozvrachyat tolko odin adress, to v slychae nalishia odinakovyz chil, bydem vozvryachat samoe nignie */

	if (current  != NULL) //poka ne vstretim pystoe zveno
	{
	   print_tree(current->left); //recyrsia na levoe podderevo
	   
	   if(current -> value == 3){adress = current;}
	   
	   print_tree(current->right); //recyrsia na pravoe podderevo
	}
	
	return adress;
}

void print_tree(tree_element* current) //funksia obxoda
{
	if (current != NULL) //poka ne vstretim pystoe zveno
	{
	   print_tree(current->left); //recyrsia na levoe podderevo
	   printf("%d", current-> value); //pechataem coren
	   print_tree(current->right); //recyrsia na pravoe podderevo
	}
}

tree_element* insert_into_tree(tree_element* root, tree_element* elem){
	tree_element* current = root;
	while(1){/////////comentariy etot NE smotret, tam prosto zagotovka dlya kopu peysta (current -> right != NULL) || (current -> left != NULL)
		
		if((current -> right != NULL) && (current -> left != NULL)){
			if((elem -> value) >= (current -> value)){
				current = current -> right;	}
			else{
				current = current -> left;}
			continue;}
		
		if((current -> right != NULL) && (current -> left == NULL)){
			if((elem -> value) >= ((current -> right) -> value)){current = current -> right; continue;}
			else{current -> left = elem; break;}}
		
		if((current -> right == NULL) && (current -> left != NULL)){
			if((elem -> value) > ((current -> left) -> value)){current -> right = elem;break;}
			else{current = current -> left; continue;}}
		
		else{current -> left = elem; break;}}//tak rechil, chto left
		
	return root;
}

tree_element* create_tree_element(int i)
{
	tree_element* current_elem = (tree_element*)malloc(sizeof(tree_element));
	current_elem -> left = NULL;
	current_elem -> left = NULL;
	current_elem -> value = i; 
	return current_elem;
}
